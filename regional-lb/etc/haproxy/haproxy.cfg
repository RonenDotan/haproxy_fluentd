global
        log /dev/log    local0
#        log 10.132.252.139:514 local0
#        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon
        maxconn 14000
        tune.ssl.default-dh-param 2048

defaults
#        log     global
#        log /dev/log    local0
        mode    http
        option forwardfor
        option http-server-close
#        option  httplog
#        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http
#        stats enable
#        stats uri /stats
#        stats realm Haproxy\ Statistics
#        stats auth lb1:pilpilon

listen mon1
        bind :9001
        mode    http
        bind-process 1
        stats enable
        stats uri /stats
        stats realm Haproxy\ Statistics
        stats auth lesha:pilpilon


# Production frontend
frontend fe_main
    log global
#    log /dev/log    local0
    option  httplog
    option  dontlognull
    mode http
    bind :80

    http-request deny if !{ path /imp }
    http-request set-src hdr(cf-connecting-ip)
    acl isv6 src -m sub :

    http-request track-sc0 src table st_ip_counter if !isv6
    http-request track-sc1 src table st_ipv6_counter if isv6

    http-request set-header tag_id %[url_param(pid)] if { url_param(pid) -m found }
    http-request set-header tag_id %[url_param(tag_id)] if { url_param(tag_id) -m found }

    http-request set-header pub_id %[url_param(pub_id)] if { url_param(pub_id) -m found }
    http-request set-header pub_id %[url_param(publisher_id)] if { url_param(publisher_id) -m found }
    http-request set-header pub_id %[url_param(pub_by_tag)] if { url_param(pub_by_tag) -m found } !{ url_param(pub_by_tag) 0 }

    http-request set-header pslrid 0
    http-request set-header pslrid %[urlp_val(offer_id)] if { url_param(offer_id) -m found }
    http-request set-header pslrid %[urlp_val(pslrid)] if { url_param(pslrid) -m found }
    acl is_network hdr_val(pslrid) gt 10

    http-request set-header ip-pslrid %[src]_%[req.hdr(pslrid)] if is_network
    http-request track-sc2 hdr(ip-pslrid) table st_ip_pslrid_counter if is_network

    http-request set-var(txn.ReturnsNetwork) sc_http_req_rate(2) if is_network
    http-request set-header returns-network %[var(txn.ReturnsNetwork)]

    # add unique id
    unique-id-format %{+X}o\ lm_%ci_%cp_%fi_%fp_%Ts_%rt_%pid
    http-request set-header scidu %[url_param(sub1)] if { url_param(pid) -m found }
    http-request set-header scidu %[url_param(scidu)] if { url_param(scidu) -m found }
    acl scidu_exists req.hdr(scidu) -m found
    http-request set-header scidu %[unique-id] unless scidu_exists

    declare capture request len 3
    http-request capture req.hdr(cf-ipcountry) id 0

    declare capture request len 4
    http-request capture req.hdr(tag_id) id 1

    declare capture request len 4
    http-request capture req.hdr(pub_id) id 2

    declare capture request len 8
    http-request capture req.hdr(pslrid) id 3

    http-request set-header sub_id1 %[url_param(sub_id)] if { url_param(sub_id) -m found }
    http-request set-header sub_id1 %[url_param(sub_id1)] if { url_param(sub_id1) -m found }
    declare capture request len 30
    http-request capture req.hdr(sub_id1) id 4


    declare capture request len 30
    http-request capture url_param(sub_id2) id 5

    declare capture request len 150
    http-request capture req.hdr(scidu) id 6


    http-request set-var(txn.NumReturns) sc_http_req_rate(0) if !isv6
    http-request set-var(txn.NumReturns) sc_http_req_rate(1) if isv6
    http-request set-header num-returns %[var(txn.NumReturns)]
    acl more_then_10_v4 sc_http_req_rate(0) gt 10
    acl more_then_10_v6 sc_http_req_rate(1) gt 10
    declare capture request len 3
    http-request capture hdr(num-returns) id 7

    # Os Detection
    acl android hdr(user-agent) -i -m sub android
    acl ios hdr(user-agent) -i -m sub iphone ipad
    http-request set-var(txn.OS) str("Desktop")
    http-request set-var(txn.OSID) int(2)
    http-request set-var(txn.OS) str("Android") if android
    http-request set-var(txn.OSID) int(3) if android
    http-request set-var(txn.OS) str("iOS") if ios
    http-request set-var(txn.OSID) int(1) if ios

    # Check Support of pixels or just header redirect
    http-request set-header only_302 1
    http-request set-header only_302 0 if { req.hdr(Accept) -m sub text/html application/xhtml+xml text/javascript }
    http-request set-header only_302 0 if { req.hdr(Accept) -m sub / } !{ req.hdr(Accept) -m sub image/ text/css }
#    http-request set-header only_302 1 if { hdr_val(tag_id) eq 166 }

    # Dates and time
    http-request set-var(txn.CurrDate) date,utime(%Y-%m-%d)
    http-request set-var(txn.CurrHour) date,utime(%H)
    http-request set-var(txn.CurrMin10) int(0)
    http-request set-var(txn.CurrRand) rand(59)

    # Handle the block type
    http-request set-header block_types "0"
    http-request set-header block_types "13" if { hdr_val(only_302) eq 1 }
    http-request set-header block_types "14" if { hdr_val(num-returns) gt 10 }
    http-request set-header block_types "15" if { hdr_val(returns-network) gt 2 }
    declare capture request len 3
    http-request capture req.hdr(block_types) id 8


    # Handle the device id / idfa
    http-request set-header idfa_androidid %[url_param(idfa)] if { urlp_len(idfa) gt 20 }
    http-request set-header idfa_androidid %[url_param(androidid)] if { urlp_len(androidid) gt 20 }
    declare capture request len 40
    http-request capture req.hdr(idfa_androidid) id 9

    declare capture request len 150
    http-request capture url_param(is_redirect) id 10

    http-request set-var(txn.LinkType) int(0)
    http-request set-var(txn.LinkType) hdr_val(num-returns),add(10) if { hdr_val(num-returns) lt 11 }

#    Add All the Query String To The URL For Redirect. Good For Mirroring
    http-request set-path /php/serving/new_serving.php
    http-request set-query tag_id=%[req.hdr(tag_id)]&pub_id=%[req.hdr(pub_id)]&return_group=%[req.hdr(num-returns)]&country=%[req.hdr(cf-ipcountry)]&os=%[var(txn.OS)]&date=%[var(txn.CurrDate)]&hour=%[var(txn.CurrHour)]&min10=%[var(txn.CurrMin10)]&rand_num=%[var(txn.CurrRand)]&only_302=%[req.hdr(only_302)]&brnsm=1&sub_id=%[req.hdr(sub_id1)]&sub_id2=%[url_param(sub_id2)]&scidu=%[req.hdr(scidu)]&androidid=%[url_param(androidid)]&idfa=%[url_param(idfa)]&is_redirect=%[url_param(is_redirect)]  if !is_network

    http-request set-query tag_id=%[req.hdr(tag_id)]&pub_id=%[req.hdr(pub_id)]&return_group=%[req.hdr(num-returns)]&country=%[req.hdr(cf-ipcountry)]&os=%[var(txn.OS)]&date=%[var(txn.CurrDate)]&hour=%[var(txn.CurrHour)]&min10=%[var(txn.CurrMin10)]&rand_num=%[var(txn.CurrRand)]&pslrid=%[req.hdr(pslrid)]&only_302=%[req.hdr(only_302)]&returns_network=%[var(txn.ReturnsNetwork)]&brnsm=1&sub_id=%[req.hdr(sub_id1)]&sub_id2=%[url_param(sub_id2)]&scidu=%[req.hdr(scidu)]&androidid=%[url_param(androidid)]&idfa=%[url_param(idfa)]&is_redirect=%[url_param(is_redirect)] if is_network



     # /etc/rsyslog.d/49-haproxy.conf - edit to send to servrs for processing
     log-format "{\"country\":%{+Q}[capture.req.hdr(0)],\"ip\":%{+Q}ci,\"publisher_id\":%{+Q}[capture.req.hdr(2)],\"datetime\":\"%Ts\",\"tag_id\":%{+Q}[capture.req.hdr(1)],\"sub_id1\":%{+Q}[capture.req.hdr(4)],\"sub_id2\":%{+Q}[capture.req.hdr(5)],\"link_id\":91,\"finger_print_id\":%{+Q}[capture.req.hdr(6)],\"pslrid\":%[capture.req.hdr(3)],\"device_id\":\"%[var(txn.OS)] - phone\",\"param2\":%{+Q}[capture.req.hdr(7)],\"param3\":%[var(txn.CurrRand)],\"view_id\":\"%[var(txn.CurrDate)]@%[var(txn.CurrHour)]@%[var(txn.CurrMin10)]@%[capture.req.hdr(2)]@%[capture.req.hdr(1)]@%[capture.req.hdr(0)]@%[var(txn.OSID)]@%[var(txn.CurrRand)]@%[capture.req.hdr(7)]\",\"block_types\":%{+Q}[capture.req.hdr(8)],\"link_type\":10,\"idfa_androidid\":%{+Q}[capture.req.hdr(9)],\"link_type\":%[var(txn.LinkType)],\"redirect\":%[capture.req.hdr(10)],\"additional_data\":{\"uri\": %{+Q}HQ,\"timer\":%Tt,\"termination_state\":\"%ts\"}}"

#    Traffic mirroroing
    use_backend dev_servers if { hdr(cf-connecting-ip) 176.231.65.221 }

#    acl reached_ip_limit more_then_10_v4 True
    use_backend repeating_ip if !is_network more_then_10_v4
    use_backend repeating_ip if !is_network more_then_10_v6

    default_backend servers

# Production servers
backend servers
    mode http
    balance url_param rand_num
#    balance roundrobin
    server srv01 10.132.132.103:80 check
    server srv03 10.132.36.131:80 check
#    errorfile 503 /etc/haproxy/errors/200pingdom.http
    http-response set-header Pragma no-cache
    http-response set-header Cache-Control no-cache,no-store,must-revalidate,max-age=0
    http-response set-header Expires 'Wed, 21 Oct 2015 07:28:00 GMT'
#

#    Notice - also in cloudflare there is a an app installed for this url - portzilla. it redirect traffic to this domain to port 8080
#    http-request redirect code 301 location https://serv.9b25e8e5b4.space/php/serving/new_serving_cf.php?tag_id=%[url_param(tag_id)]&pub_id=%[url_param(pub_id)]&return_group=%[var(txn.NumReturns)]&country=%[req.hdr(cf-ipcountry)]&os=%[var(txn.OS)]&date=%[var(txn.CurrDate)]&hour=%[var(txn.CurrHour)]&min10=%[var(txn.CurrMin10)]&rand_num=%[var(txn.CurrRand)]


## Test Serving With mirroring
##    filter spoe  engine mirror  config /etc/haproxy/mirror.conf

listen rsyslog-test
    mode tcp
    bind :555
    balance roundrobin
#    server dev-srv01 10.132.252.139:80 check


# Currently not active
frontend fe_cf_cache
#    log /dev/log    local0
    option  httplog
    option  dontlognull
    mode http
    bind :8080
    log-format "{"user-agent":%{+Q}[capture.req.hdr(0)],"country":%{+Q}[capture.req.hdr(1)],"ip":%{+Q}[capture.req.hdr(2)],"uri":%{+Q}HQ,"tag_id":%{+Q}[capture.req.hdr(3)],"publisher_id":%{+Q}[capture.req.hdr(4)],"returns":%{+Q}[var(txn.NumReturns)],"os":%{+Q}[var(txn.OS)],"datetime":"%T","rand_num":%[var(txn.CurrRand)],"IsV6":%[var(txn.isv6)],"pslrid":%[capture.req.hdr(5)],"sub_id":%{+Q}[capture.req.hdr(6)],"sub_id2":%{+Q}[capture.req.hdr(7)],"scidu":%{+Q}[capture.req.hdr(8)],"backend":"%b","frotend":"fe_cf_cache"}"
    default_backend cf_cache_servers



# Currently not active
backend cf_cache_servers
    mode http
    balance roundrobin
    server srv01 10.132.132.103:80
    server srv03 10.132.36.131:80
    errorfile 503 /etc/haproxy/errors/200pingdom.http

    http-response del-header Pragma
    # http-response set-header Cache-Control public,max-age=3600,s-maxage=3600
    http-response set-header Cache-Control public,s-maxage=3600
    http-response del-header Expires
    http-response del-header Cookie



backend repeating_ip
    mode http
    balance roundrobin
##    filter spoe  engine mirror  config /etc/haproxy/mirror.conf


backend dev_servers
    mode http
    balance roundrobin

    server dev-srv01 10.132.252.139:80 check
    errorfile 503 /etc/haproxy/errors/200pingdom.http

    http-response set-header Pragma no-cache
    http-response set-header Cache-Control no-cache,no-store,must-revalidate,max-age=0
    http-response set-header Expires 'Wed, 21 Oct 2015 07:28:00 GMT'

##    filter spoe  engine mirror  config /etc/haproxy/mirror_dev.conf

backend st_ip_counter
    stick-table type ip size 100m expire 30m store http_req_rate(30m)

backend st_ipv6_counter
    stick-table type ipv6 size 100m expire 30m store http_req_rate(30m)

backend st_ip_pslrid_counter
    stick-table type string size 100m expire 30m store http_req_rate(30m)




# Mirror agents
# https://www.haproxy.com/blog/haproxy-traffic-mirroring-for-real-world-testing/
backend mirroragents
    mode tcp
    balance roundrobin
    timeout connect 5s
    timeout server 5s
#    server agent0 10.132.252.139:12345
    server agent1 10.132.132.103:12345 check
    server agent3 10.132.36.131:12345 check
backend dev_mirroragents
    mode tcp
    balance roundrobin
    timeout connect 5s
    timeout server 5s
    server agent0 10.132.252.139:12345 check
